{
    "blogs": [
        {
            "title": "Bootstrap",
            "date": "Posted 9/5/17",
            "content": "This week we focused on Bootstrap: A CSS framework built to make styling webpages easier by utilizing classes. We embedded the bootstrap CDN and also the jQuery CDN into our pages before we could begin, so that way any time we reference Bootstrap classes, it knows where to find them, on the hosted CDN, we could have also downloaded and included the minified bootstrap files in our sites. Bootstrap’s biggest draws for us were its mobile-first layout, fluid 12 column design and the hundreds of options that make quick work of creating a simple and stylish website.<br><br> Bootstrap makes mobile-first webpage building easy since its class system is fluid, meaning that the width of the user’s screen determines the width of the 12 columns that make the content of the page.<br><br>For example: If we had a specific 3 column layout for a site that we want every user to see whether they’re looking at our page on an iPhone 4’s screen or an ultra-wide 4k monitor we can style our page layout with the extra-small column size class: col-xs-4. The number at the end of the class name specifies how many of the 12 columns in a row we want the content to occupy.<br><br>And our intro into using Bootstrap was rebuilding this blog portion of our personal site. Which means that everything you see here is styled using Bootstrap!",
            "tags": "bootstrap style styling css design jquery cdn mobile first",
            "id": "1"
        },
        {
            "title": "XHR",
            "date": "Posted: 9/1/17",
            "content": "This week we learned about JSON and how to do XHR requests in our JavaScript files to bring the information over. In class we started with two vanilla JS arrays and moved them into JSON files, using JSONLint to validate our files. Then the fun started. Then we discovered how to get that information into our JS and access it in our functions. <br><br>We began by declaring a new variable to hold our xhr request with it’s value set to “new XMLHttpRequest();” Then we put an on load event listener, so that the request begins as soon as the page loads, then added an on error event listener, just in case anything goes wrong. <br><br> Then we placed a .open() method on our variable with the xhr request in it. That initializes our XMLHttpRequest. Then we had to pass two arguments which looked like this: .open(“GET”, filename.json”); <br><br>Lastly we added a .send method which sends the request and returns a value as soon as it can, in an asynchronous fashion. Asynchronous loading of our JSON files was a problem all by itself too, because we couldn’t run the major function the project hinged on until both files were loaded in their entirety. There were a couple solutions to this problem but jQuery is supposed to offer a simpler way to solve this problem and those lessons should be starting in the next couple weeks or so.",
            "tags": "xhr json vanilla js javascript array arrays eventlistener event listener method request",
            "id": "2"
        },
        {
            "title": "Event Listeners and Markdown",
            "date": "Posted: 8/21/17",
            "content": "This week we had an in class exercise “clicky planets” to get us all aquatinted with a few event listeners: <br><br> Click listens for, as you can guess, a click. <br><br>Mouseenter listens for the user’s mouse to be moved into a specified area or just a single element. <br><br>Keypress, each key has its own assigned numerical value that you can reference via the “key” listener but the modifier keys can also be referenced: keys like alt, shift, control, and also the enter key. <br><br>But to use these event listeners meant targeting elements on our page based on what is selected, or what the user is clicking. And since we’re still using vanilla JavaScript at this point we had to find the elements the user was selecting via DOM traversal. <br><br>The process of finding what the user selected consisted of creating an event listener with a console log that displays the current target and then using what Chrome’s dev tools returns to be what our function listens for. For example on clicky planets we had a large number of image elements each with a click event listener on them, each individually running a function that displays text over the image when they get clicked. But we don’t want to run the function on every image element when any image is clicked. It took DOM traversal and event targeting to select and run the function only that one element that was clicked by the user. <br><br> Markdown<br><br>We were also formally introduced to Markdown for GitHub. We need markdown to setup a proper readme file for our projects that we keep on GitHub. The readme file is the world's first look into a project and needs to have all the right information so knowing what the project is, why you started it, and how to pull it down and use it if they want to. Thankfully we were guided to a 'readme cheatsheet' that makes building and styling readme files in Markdown easier to deal with.",
            "tags": "vanilla js javascript array arrays eventlistener event listener  listen class exercise dom traversal dev tools chrome function markdown github readme style styling",
            "id": "3"
        },
        {
            "title": "Working in Groups through GitHub",
            "date": "Posted: 8/13/17",
            "content": "At first it was scary to be working in the same files as other people. There was a challenge in trying to not step on peoples’ coding toes as each person worked. We spent a lot of time planning our project to avoid conflicts as long as we could. But when we had to start building our JS and CSS in the same files as each other the conflicts started to emerge. <br><br> Our first couple merge conflict took us hours to figure out. The most difficult part was learning the commands and how to use them properly. Understanding the concepts of what git fetch, git merge master and checking out remote branches was a struggle at first. But it was mostly a problem because we didn't read and re-read the instructions on how to deal with merge conflicts in the documentation for the project that was given to us. And GitHub has some helpful instructions on how to take care of them too. <br><br> All in all, after the first major conflicts we didn’t have many major issues! When code needed to be tested, we checked out our teammate’s branch and gave them feedback, we helped each other as problems arose and it went smoothly. I did realize that while I work much quicker when I work alone when it comes to working on projects working in groups in person really helps projects move quicker. Had we not worked in person over the course of 4 days it would have taken so much longer: waiting on slack messages and emails to communicate would have left a lot of time between work actually being done. <br><br> Overall, I really enjoyed working through GitHub for this project. Having cards to reference as we worked really helped to organize all of our thoughts. Also letting everybody tackle their work in their own way was fun and working in groups meant that we got more experience reading and understanding the code other's have written",
            "tags": "class github group groups work js javascript merge conflict cards ticket project board",
            "id": "4"
        },
        {
            "title": "More GitHub",
            "date": "Posted: 8/13/17",
            "content": "This week we learned how to use GitHub's project board to make group work possible. Our first assignment was a combination of working together to build a project board so that every person had a task. So we practiced how to break down a project and make sure everybody knew the procedures when it came to creating, testing, and then merging a Pull Request into master.",
            "tags": "github group work class project board",
            "id": "5"
        },
        {
            "title": "JavaScript week 3",
            "date": "Posted: 8/13/17",
            "content": "The temperature converter: accept an input from the user, let them choose if they want the result converted to Fahrenheit or Celsius. Give them a “Convert!” button and a button to clear the fields to go again. <br><br> For this one our group came in expecting the worst. Someone in E5 mentioned to us that this was his first “crying in the shower” project. So we knew prepared. This might be a toughie. <br><br> I don’t remember if we exactly delegated tasks for each bit of the assignment but looking back I see Eric focused on getting the input fields and especially the clear/reset button working. Jessica and Brooke focused more on getting the functions to do what we wanted them to. And I spent a lot of time trying to wrap my brain around ternary statements so we could use them to color the returned temperature depending on if the temperature was hot, cold, or anywhere in the middle! <br><br> I don’t mean to say I didn’t touch any work that wasn’t a ternary statement, we all contributed to each part of the assignment but it definitely felt like we had each decided to solve and understand one problem for the group to then come back and explain how we did what we did to the rest of the group. <br><br> Like the command line assignment we had the first week! That’s what it felt like! We all knew what we had to do, we did our research and reconvened when we had a good grasp on each issue so it could be explained to the  without all the struggle we went through individually. <br><br> I do think our group is well put together, we are all hardworking and committed to fully understanding the topic at hand. We get pretty excited for each other when we do something cool or learn something new. We feel proud for the each other when we do something. And when it comes to explaining something we’ve learned to each other I’d say we’re pretty good at that too.",
            "tags": "vanilla js javascript class function group temperature converter ternary math",
            "id": "6"
        },
        {
            "title": "JavaScript Week 2",
            "date": "Posted: 8/13/17",
            "content": "We had just finished our first lesson with for loops and if statements. This group exercise was to  use what we had learned to do arithmetic on a value given by a user. Doing math on the value as long as it’s value was more than 0. <br><br> The coin counter: start with any amount of money and now, in the optimal case, what would be the least amount of quarters, dimes, nickels, and pennies to make up that sum of money? Man this one was a hassle. <br><br> Long story short, we had two versions of this project by the end. both worked fine but our first version did not multiply the input value by 100 to get rid of the floating point value, which led to rounding errors in some cases. Basically our first version revolved around an arithmetical solution to the problem while our second version definitely utilized the power of JavaScript to solve the problem. <br><br> Aside from learning how to use if statements and if else statements and for loops I got a lesson in: You’re method of solving a problem is not always THE method to solve the problem. <br><br> So stop and ask friends “is this how you would go about this? What would you do.” And while choosing one clear path to move forward on is good, taking the time to scope out other possible roads before you start can pay off. Also rounding numbers and using decimals in js is trouble. Multiply to avoid using floating point numbers because whole numbers are our friends.",
            "tags": "vanilla js javascript class function group loop if statements math coin counter",
            "id": "7"
        },
        {
            "title": "JavaScript week 1",
            "date": "Posted: 8/13/17",
            "content": "We officially started js in class this week. I’m glad I did the Treehouse prework that covered js because if I had to be dropped into this class with no prior knowledge of how js operated I would have been incredibly lost. Getting exposed to it in class and being taught about it again really reinforced the “how” and “why” of js’s inner workings.",
            "tags": "vanilla js javascript class",
            "id": "8"
        }
    ]
}