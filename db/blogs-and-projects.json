{
    "blogs": [
        {
            "title": "Front-End Capstone: Reflections",
            "date": "Posted: 1/4/18",
            "content": "After we each presented we talked a little about the lessons we've learned throughout the course of our class. Some of the ones that stood out to me, and in no particular order:<br><br> 1. Talk out your problems. To your peers, of your mentors and teachers, of people around you in your life, or even to a little rubber duck. Just talking about a problem might bring a solution or a different way of approaching a problem to light.<br><br> 2. Don't compare your work and your progress against others. It's poison. There will always be somebody who knows more, who has done more, who is where you think you want to be. But they're not you. You have your own path and your own mountains to climb. Every person is different from the last and likewise, every challenge a person faces is different for every person.<br><br> 3. Don't be afraid of setting the bar too high. When starting a project we can all be a little starry-eyed. But sometimes if you don't set the bar high, you'll have nothing to reach for. Know what is MVP and what is going to be a stretch goal and chase it.<br><br> 4. Never stop learning.<br><br> And of course: <br><br> 5, Plan, plan, plan. When you and your team all know the steps to the dance, nobody's stepping on anyone else's' feet.",
            "tags": "angular ajax html javascript capstone project exercise nss class final front end front-end",
            "id": "16"
        },
        {
            "title": "Front-End Capstone: The next day",
            "date": "Posted: 12/21/17",
            "content": "Yesterday we E6-ers presented our Front-end Capstone projects for demo day. We had a pretty large audience made up of alumni, staff, current students, and incoming students.<br><br> Everyone was prepared and every person in the class did a really good job of presenting. There was plenty of humor and real-life stories and not to mention lots of hard work and growth from people that started coding only 6 short months ago.<br><br> A few projects definitely stood out among the rest, Ken's P.O.O.P: an app that uses Google Civic to search and see how politicians vote and such; Gina's myHouse home remodeling tracker; Adam's Meet Here: a map app that helps find the best place for two parties to meet that will try to find a place in the middle for them to meet; and Kellie's Bully Tracker: a tool created by a teacher and mother that simplifies parents and administrator's ability to keep records of bullying in school or even the workplace.<br><br> These first six months have been a long and rough road but for the 14 of us it has clearly paid off, from HTML, CSS, and vanilla Javascript to Sass, jQuery, and AngularJS we've worked and learned a lot, with still a lot on this road ahead of us. but with an app built by us from scratch under our belts, I think we can all say we're proud of how far we've come.",
            "tags": "angular ajax html javascript capstone project exercise nss class final front end front-end",
            "id": "15"
        },
        {
            "title": "Front-End Capstone: The elevator pitch",
            "date": "Posted: 12/19/17",
            "content": "My front-end capstone project is a companion app for the Star Wars Role Playing Game specifically for Game Masters, the one running the game. The Star Wars RPG runs similar to tabletop RPGs like Dungeons & Dragons: There is a GM at the head of the table running the story, world, and characters and enemies the players interact with. At the other end of that table is the player characters, the main actors in the story. <br><br> When it comes to being a GM there are dozens of things that need to be tracked at a single time. And when it comes to tracking a whole battle's worth of enemy characters there are few ways to keep track of all those bad guys. Index cards are the first and most obvious solution to this problem but that can lead to lost time shuffling through cards writing and erasing and writing and erasing; it can be cumbersome. <br><br>I offer a solution: an NPC (non-player-character) tracker. A web app for GMs to enter and save units for player characters to fight. With it, unit stats, weapons, gear and unit descriptions can be entered and tracked. The battle page is where units damage and states can be tracked, units can even be marked as dead when the player characters finish off a bad guy. The user can even pull units from their library of saved units to add to a battle at any time.",
            "tags": "angular ajax html javascript capstone project exercise nss class final front end front-end",
            "id": "14"
        },
        {
            "title": "AngularJS",
            "date": "Posted: 11/19/17",
            "content": "This past week we’ve been a lot with working with Angular, a platform that uses HTML and JS to make HTML more dynamic while writing less Javascript.  So far It’s been amazing and so quick to adopt, and it builds on the modularity of our file structure that we’ve been getting accustomed to.  Angular controllers get their own folder: ‘controllers’ and services like API calls and ajax calls are all kept in a ‘services’ folder.  This kind of modularity makes it easy for us to know where anything is kept at any time.  Angular’s use of scope and rootScope make it very easy to keep things modular as well.  And now that we can use Angular, we might never have to write a DOM string function for the rest of class! Getting to use {{handlebars}} to denote that something is a variable and can change whenever some piece of data changes is life-changing.  I’ve learned lately to really appreciate how far we’ve come as students but also how far development for the modern internet has come, Angular has made it clear to since, turning the static HTML page into something a little more dynamic is incredible.",
            "tags": "angular api ajax dom html javascript exercises",
            "id": "13"
        },
        {
            "title": "Group Project: Theme Park Map",
            "date": "Posted: 11/13/17",
            "content": "This group project was assigned to us based on our Meyers-Briggs personality types, which was a fun was to group everyone together. Unless, you’re a personality that doesn’t fit with too many other peoples’. And that’s how the group of Miscellaneous personality came to be! And that was the group I was a part of: it was a great group though. All of us had a strong desire to focus on planning up front and making sure everyone was on the same page before any code was written. We used 3 full whiteboard to plan our initial file structure and describe what functions would be going where and who would be working on what. We knew this project would be a big one but we didn’t know how tough it would be.  On paper it sounded like a lot of ground to cover; between all the ajax calls using queries to only get the data we needed, to formatting our data structure when it came back to us, to making sure the final layout was up to our project manager’s specifications, it all sounded like a lot. BUT THEN, our project manager sends out not one, or two, but three changes to the project specs. And as our deadline was approaching we could no longer take time out of coding to rethink how it would effect out plan, we just had to take the hits as they came and roll with what we had going.  It was the toughest project to this point but man, now that it’s over I have to say I’m proud of our group’s work. We all worked hard and asked questions and since we spent a good amount of time planning we all had a clear vision of the final project and I believe that was incredibly vital in the success of our group.",
            "tags": "group project class nss theme park js javascript theme park ajax",
            "id": "12"
        },
        {
            "title": "Firebase",
            "date": "Posted 10/31/17",
            "content": "Google’s FIrebase software allows developers to host sites, have a database, incorporate login authentication, and a bunch of other stuff. It’s only built for small scale usage and for us as students that’s perfect. We got to use Firebase authentication to require our users to login using their Google account before they could interact with the rest of our app. And also used Firebase database to store a JSON file we set up that would be updated dynamically as the user interacted with certain parts of the app.",
            "tags": "firebase database website google ",
            "id": "11"
        },
        {
            "title": "API's",
            "date": "Posted 10/24/17",
            "content": "We had our first interactions with outside data, no longer making our own JSON file to use in our projects we used The Open Weather Map. A service that delivers weather information like many other weather services out there. But for us as developers to use their data we needed to use Open Weather Map’s API. Application programming interfaces, or simply API’s, are a way to communicate with and receive data from someone else’s database. We needed Open Weather Map’s weather information for the current forecast and 5 day forecast. This wasn’t as easy as just filling out a form and asking for only 1 and 5 days of weather data. Sadly this meant making one call for the data and sifting though the data to only display what we needed from that huge return of information. Using API’s means being very well read on the documentation they and others have put together for using the API. Documentation for making calls, what information one call will return, how to get certain things but not others and what all their data can do for the developer. But just because there is documentation that does not guarantee that it is good or even complete. Thankfully Open Weather Map had pretty good documentation, and most of the data we got back was what we needed.",
            "tags": "API call xhr database data weather project class nss",
            "id": "10"
        },
        {
            "title": "Promises",
            "date": "Posted 10/17/17",
            "content": "Recently we’ve been learning about promises and using them when we need to make XHR calls. Promises are really cool because they make dealing with multiple JSON files easy, especially when there is a lot of data coming in. It’s like the promise is saying: “Hey wait until I have this data resolved before you do what you need to, I don’t want you executing with no or incomplete data.”  We tell things that need the data to wait while things that don’t need to data can continue to be executed. We saw this in action in our project ‘Acme Explosives.’ We set up 3 JSON files that had product information that needed to be displayed except each file had some product, category, or type number id that needed to match up with a product, category or type name in a different file. Basically one file required another which required another. Normally that would be an issue since all three files would load in whenever they decided they were ready and that can lead to a function executing before it had all the data it needed. So to deal with the asynchronous operating we chained promises: One call would be made after another. That ensured all data would be where we needed it before anything important happened like displaying information to the user.",
            "tags": "XHR promises data database JSON javascript acme explosives class nss school project",
            "id": "9"
        },
        {
            "title": "Bootstrap",
            "date": "Posted 9/5/17",
            "content": "This week we focused on Bootstrap: A CSS framework built to make styling webpages easier by utilizing classes. We embedded the bootstrap CDN and also the jQuery CDN into our pages before we could begin, so that way any time we reference Bootstrap classes, it knows where to find them, on the hosted CDN, we could have also downloaded and included the minified bootstrap files in our sites. Bootstrap’s biggest draws for us were its mobile-first layout, fluid 12 column design and the hundreds of options that make quick work of creating a simple and stylish website.  Bootstrap makes mobile-first webpage building easy since its class system is fluid, meaning that the width of the user’s screen determines the width of the 12 columns that make the content of the page. For example: If we had a specific 3 column layout for a site that we want every user to see whether they’re looking at our page on an iPhone 4’s screen or an ultra-wide 4k monitor we can style our page layout with the extra-small column size class: col-xs-4. The number at the end of the class name specifies how many of the 12 columns in a row we want the content to occupy. And our intro into using Bootstrap was rebuilding this blog portion of our personal site. Which means that everything you see here is styled using Bootstrap!",
            "tags": "bootstrap style styling css design jquery cdn mobile first",
            "id": "8"
        },
        {
            "title": "XHR",
            "date": "Posted: 9/1/17",
            "content": "This week we learned about JSON and how to do XHR requests in our JavaScript files to bring the information over. In class we started with two vanilla JS arrays and moved them into JSON files, using JSONLint to validate our files. Then the fun started. Then we discovered how to get that information into our JS and access it in our functions.  We began by declaring a new variable to hold our xhr request with it’s value set to “new XMLHttpRequest();” Then we put an on load event listener, so that the request begins as soon as the page loads, then added an on error event listener, just in case anything goes wrong.   Then we placed a .open() method on our variable with the xhr request in it. That initializes our XMLHttpRequest. Then we had to pass two arguments which looked like this: .open(“GET”, filename.json”);  Lastly we added a .send method which sends the request and returns a value as soon as it can, in an asynchronous fashion. Asynchronous loading of our JSON files was a problem all by itself too, because we couldn’t run the major function the project hinged on until both files were loaded in their entirety. There were a couple solutions to this problem but jQuery is supposed to offer a simpler way to solve this problem and those lessons should be starting in the next couple weeks or so.",
            "tags": "xhr json vanilla js javascript array arrays eventlistener event listener method request",
            "id": "7"
        },
        {
            "title": "Event Listeners and Markdown",
            "date": "Posted: 8/21/17",
            "content": "This week we had an in class exercise “clicky planets” to get us all aquatinted with a few event listeners:   Click listens for, as you can guess, a click.  Mouseenter listens for the user’s mouse to be moved into a specified area or just a single element.  Keypress, each key has its own assigned numerical value that you can reference via the “key” listener but the modifier keys can also be referenced: keys like alt, shift, control, and also the enter key.  But to use these event listeners meant targeting elements on our page based on what is selected, or what the user is clicking. And since we’re still using vanilla JavaScript at this point we had to find the elements the user was selecting via DOM traversal.  The process of finding what the user selected consisted of creating an event listener with a console log that displays the current target and then using what Chrome’s dev tools returns to be what our function listens for. For example on clicky planets we had a large number of image elements each with a click event listener on them, each individually running a function that displays text over the image when they get clicked. But we don’t want to run the function on every image element when any image is clicked. It took DOM traversal and event targeting to select and run the function only that one element that was clicked by the user.   Markdown We were also formally introduced to Markdown for GitHub. We need markdown to setup a proper readme file for our projects that we keep on GitHub. The readme file is the world's first look into a project and needs to have all the right information so knowing what the project is, why you started it, and how to pull it down and use it if they want to. Thankfully we were guided to a 'readme cheatsheet' that makes building and styling readme files in Markdown easier to deal with.",
            "tags": "vanilla js javascript array arrays eventlistener event listener  listen class exercise dom traversal dev tools chrome function markdown github readme style styling",
            "id": "6"
        },
        {
            "title": "Working in Groups through GitHub",
            "date": "Posted: 8/13/17",
            "content": "At first it was scary to be working in the same files as other people. There was a challenge in trying to not step on peoples’ coding toes as each person worked. We spent a lot of time planning our project to avoid conflicts as long as we could. But when we had to start building our JS and CSS in the same files as each other the conflicts started to emerge.   Our first couple merge conflict took us hours to figure out. The most difficult part was learning the commands and how to use them properly. Understanding the concepts of what git fetch, git merge master and checking out remote branches was a struggle at first. But it was mostly a problem because we didn't read and re-read the instructions on how to deal with merge conflicts in the documentation for the project that was given to us. And GitHub has some helpful instructions on how to take care of them too.   All in all, after the first major conflicts we didn’t have many major issues! When code needed to be tested, we checked out our teammate’s branch and gave them feedback, we helped each other as problems arose and it went smoothly. I did realize that while I work much quicker when I work alone when it comes to working on projects working in groups in person really helps projects move quicker. Had we not worked in person over the course of 4 days it would have taken so much longer: waiting on slack messages and emails to communicate would have left a lot of time between work actually being done.   Overall, I really enjoyed working through GitHub for this project. Having cards to reference as we worked really helped to organize all of our thoughts. Also letting everybody tackle their work in their own way was fun and working in groups meant that we got more experience reading and understanding the code other's have written",
            "tags": "class github group groups work js javascript merge conflict cards ticket project board",
            "id": "5"
        },
        {
            "title": "More GitHub",
            "date": "Posted: 8/13/17",
            "content": "This week we learned how to use GitHub's project board to make group work possible. Our first assignment was a combination of working together to build a project board so that every person had a task. So we practiced how to break down a project and make sure everybody knew the procedures when it came to creating, testing, and then merging a Pull Request into master.",
            "tags": "github group work class project board",
            "id": "4"
        },
        {
            "title": "JavaScript week 3",
            "date": "Posted: 8/13/17",
            "content": "The temperature converter: accept an input from the user, let them choose if they want the result converted to Fahrenheit or Celsius. Give them a “Convert!” button and a button to clear the fields to go again.   For this one our group came in expecting the worst. Someone in E5 mentioned to us that this was his first “crying in the shower” project. So we knew prepared. This might be a toughie.   I don’t remember if we exactly delegated tasks for each bit of the assignment but looking back I see Eric focused on getting the input fields and especially the clear/reset button working. Jessica and Brooke focused more on getting the functions to do what we wanted them to. And I spent a lot of time trying to wrap my brain around ternary statements so we could use them to color the returned temperature depending on if the temperature was hot, cold, or anywhere in the middle!   I don’t mean to say I didn’t touch any work that wasn’t a ternary statement, we all contributed to each part of the assignment but it definitely felt like we had each decided to solve and understand one problem for the group to then come back and explain how we did what we did to the rest of the group.   Like the command line assignment we had the first week! That’s what it felt like! We all knew what we had to do, we did our research and reconvened when we had a good grasp on each issue so it could be explained to the  without all the struggle we went through individually.   I do think our group is well put together, we are all hardworking and committed to fully understanding the topic at hand. We get pretty excited for each other when we do something cool or learn something new. We feel proud for the each other when we do something. And when it comes to explaining something we’ve learned to each other I’d say we’re pretty good at that too.",
            "tags": "vanilla js javascript class function group temperature converter ternary math",
            "id": "3"
        },
        {
            "title": "JavaScript Week 2",
            "date": "Posted: 8/13/17",
            "content": "We had just finished our first lesson with for loops and if statements. This group exercise was to  use what we had learned to do arithmetic on a value given by a user. Doing math on the value as long as it’s value was more than 0.   The coin counter: start with any amount of money and now, in the optimal case, what would be the least amount of quarters, dimes, nickels, and pennies to make up that sum of money? Man this one was a hassle.   Long story short, we had two versions of this project by the end. both worked fine but our first version did not multiply the input value by 100 to get rid of the floating point value, which led to rounding errors in some cases. Basically our first version revolved around an arithmetical solution to the problem while our second version definitely utilized the power of JavaScript to solve the problem.   Aside from learning how to use if statements and if else statements and for loops I got a lesson in: You’re method of solving a problem is not always THE method to solve the problem.   So stop and ask friends “is this how you would go about this? What would you do.” And while choosing one clear path to move forward on is good, taking the time to scope out other possible roads before you start can pay off. Also rounding numbers and using decimals in js is trouble. Multiply to avoid using floating point numbers because whole numbers are our friends.",
            "tags": "vanilla js javascript class function group loop if statements math coin counter",
            "id": "2"
        },
        {
            "title": "JavaScript week 1",
            "date": "Posted: 8/13/17",
            "content": "We officially started js in class this week. I’m glad I did the Treehouse prework that covered js because if I had to be dropped into this class with no prior knowledge of how js operated I would have been incredibly lost. Getting exposed to it in class and being taught about it again really reinforced the “how” and “why” of js’s inner workings.",
            "tags": "vanilla js javascript class",
            "id": "1"
        }
    ],
    "projects": [
        {
            "title": "NPC Tracker for Star Wars RPG",
            "description": "Front End Capstone: A companion app for the Star Wars Role Playing Game. Game Masters now have the ability to quickly create custom units to use in battle. Create, save, and track damage all in one place! It's time to throw away all those index cards of character information.",
            "path": "./images/sw-npc.png",
            "link": "https://github.com/alexsanchez728/SWRPG-NPC-generator-and-tracker",
            "id": "6"
        },
        {
            "title": "Angular Movie History",
            "description": "An NSS in-class project. Our first foray into using AngularJS for a single page app. The objective was to use The Movie Databse's API and also Firebase's Authentication and database services. Only users who sign-in will be able to use the site. Signed-in users can search movies, save movies to a wishlist, and rate watched movies",
            "path": "./images/angular-movies.png",
            "link": "https://github.com/alexsanchez728/angular-movie-history",
            "id": "5"
        },
        {
            "title": "Acme Explosives",
            "description": "An NSS excercise. A simple product catalog where a user may select a category from a dropdowm. When a category is selected, any product under that category must be displayed.",
            "path": "./images/acme-screenshot.png",
            "link": "https://github.com/alexsanchez728/acme-explosives",
            "id": "4"
        },
        {
            "title": "Adopt My Cats",
            "description": "An NSS excercise. A single page that allows the user to load in a number of cats, display them on the screen, and be able to filter them based on whether or not they are considered disabled (have 10 toes or less).",
            "path": "./images/adopt-cats-screenshot.png",
            "link": "https://github.com/alexsanchez728/adopt-my-cats",
            "id": "3"
        },
        {
            "title": "Theme Park Map",
            "description": "An NSS group project. Create an interactive map for a theme park, allow the user to see all attractions based on a time they've selected or an area they've selected. Also, any names or descriptions that contain certain keywords will be effected in a special way when searched for.",
            "path": "./images/theme-park-screenshot.png",
            "link": "https://github.com/nss-evening-cohort-06/theme-park-misc",
            "id": "2"
        },
        {
            "title": "Sandwich Maker",
            "description": "An NSS excercise. Create a sandwich order form that allows the user to select all the ingredients for a custom deli sandwich. Create a Sandwich module, then create the following as individual modules, using IIFE syntax, to augment the sandwich.",
            "path": "./images/sandwich-maker.png",
            "link": "https://github.com/alexsanchez728/sandwich-maker",
            "id": "1"
        }
    ]
}